// <auto-generated />
using System;
using CicekSepeti.DataAccess.Concrate;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CicekSepeti.DataAccess.Migrations
{
    [DbContext(typeof(CicekSepetiDbContext))]
    partial class CicekSepetiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaProduct.Categories", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long?>("Root_Category_Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Root_Category_Id");

                    b.ToTable("Categories", "PRODUCT");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaProduct.Products", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("Category_Id")
                        .HasColumnType("bigint");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Product_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Category_Id");

                    b.ToTable("Products", "PRODUCT");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaShopping.ShoppingCartItems", b =>
                {
                    b.Property<long>("Product_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ShoppingCart_Id")
                        .HasColumnType("bigint");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.HasKey("Product_Id", "ShoppingCart_Id");

                    b.HasIndex("ShoppingCart_Id");

                    b.ToTable("ShoppingCartItem", "SHOPPING");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaShopping.ShoppingCarts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ShoppingCarts", "SHOPPING");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaUser.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Is_Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", "USER");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaProduct.Categories", b =>
                {
                    b.HasOne("CicekSepeti.Entity.Entities.SchemaProduct.Categories", "RootCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("Root_Category_Id");

                    b.Navigation("RootCategory");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaProduct.Products", b =>
                {
                    b.HasOne("CicekSepeti.Entity.Entities.SchemaProduct.Categories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaShopping.ShoppingCartItems", b =>
                {
                    b.HasOne("CicekSepeti.Entity.Entities.SchemaProduct.Products", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CicekSepeti.Entity.Entities.SchemaShopping.ShoppingCarts", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCart_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaShopping.ShoppingCarts", b =>
                {
                    b.HasOne("CicekSepeti.Entity.Entities.SchemaUser.Users", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaProduct.Categories", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaProduct.Products", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaShopping.ShoppingCarts", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("CicekSepeti.Entity.Entities.SchemaUser.Users", b =>
                {
                    b.Navigation("ShoppingCarts");
                });
#pragma warning restore 612, 618
        }
    }
}
